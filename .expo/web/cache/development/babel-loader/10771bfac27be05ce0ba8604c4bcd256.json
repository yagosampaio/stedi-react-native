{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport default {\n  get name() {\n    return 'ExpoBarometer';\n  },\n\n  isAvailableAsync: function isAvailableAsync() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", false);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  startObserving: function startObserving() {},\n  stopObserving: function stopObserving() {}\n};","map":{"version":3,"sources":["../src/ExpoBarometer.web.ts"],"names":[],"mappings":";AAAA,eAAe;EACb,IAAI,IAAJ,GAAQ;IACN,OAAO,eAAP;EACD,CAHY;;EAIP,gBAJO,8BAIS;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA,iCACb,KADa;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAErB,CANY;EAOb,cAPa,4BAOC,CAAK,CAPN;EAQb,aARa,2BAQA,CAAK;AARL,CAAf","sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoBarometer';\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    return false;\n  },\n  startObserving() {},\n  stopObserving() {},\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}