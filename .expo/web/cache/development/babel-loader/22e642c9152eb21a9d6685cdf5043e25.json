{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"type\", \"visible\", \"theme\", \"onLayout\", \"padding\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"./Typography/AnimatedText\";\nimport { withTheme } from \"../core/theming\";\n\nvar HelperText = function HelperText(_ref) {\n  var style = _ref.style,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'info' : _ref$type,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? true : _ref$visible,\n      theme = _ref.theme,\n      onLayout = _ref.onLayout,\n      _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 'normal' : _ref$padding,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useRef = React.useRef(new Animated.Value(visible ? 1 : 0)),\n      shown = _React$useRef.current;\n\n  var _React$useRef2 = React.useRef(0),\n      textHeight = _React$useRef2.current;\n\n  var scale = theme.animation.scale;\n  React.useEffect(function () {\n    if (visible) {\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  var handleTextLayout = function handleTextLayout(e) {\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  var colors = theme.colors,\n      dark = theme.dark;\n  var textColor = type === 'error' ? colors.error : color(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n  return React.createElement(AnimatedText, _extends({\n    onLayout: handleTextLayout,\n    style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n      color: textColor,\n      opacity: shown,\n      transform: visible && type === 'error' ? [{\n        translateY: shown.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-textHeight / 2, 0]\n        })\n      }] : []\n    }, style]\n  }, rest), rest.children);\n};\n\nvar styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default withTheme(HelperText);","map":{"version":3,"sources":["HelperText.tsx"],"names":["HelperText","type","visible","padding","rest","current","shown","React","Animated","textHeight","scale","theme","toValue","duration","useNativeDriver","handleTextLayout","e","onLayout","dark","textColor","colors","color","styles","opacity","transform","translateY","inputRange","outputRange","text","fontSize","paddingVertical","paddingHorizontal","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}