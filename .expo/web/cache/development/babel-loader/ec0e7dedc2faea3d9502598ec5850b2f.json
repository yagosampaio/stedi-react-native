{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Accelerometer } from 'expo-sensors';\nimport getSpikesFromAccelerometer from \"./utils/StepCalculator\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Counter() {\n  var data = useRef({\n    x: 0,\n    y: 0,\n    z: 0\n  });\n  var startTime = new Date().getTime();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      subscription = _useState2[0],\n      setSubscription = _useState2[1];\n\n  var recentAccelerationData = useRef([]);\n  var steps = useRef([]);\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      stepCount = _useState4[0],\n      setStepCount = _useState4[1];\n\n  var previousHighPointTimeRef = useRef(0);\n  var previousValue = useRef(0);\n\n  var _slow = function _slow() {\n    Accelerometer.setUpdateInterval(1000);\n  };\n\n  var _fast = function _fast() {\n    Accelerometer.setUpdateInterval(100);\n  };\n\n  var _subscribe = function _subscribe() {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Accelerometer.isAvailableAsync());\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n\n    setStepCount(0);\n    recentAccelerationData.current = [];\n    steps.current = [];\n    setSubscription(Accelerometer.addListener(function (accelerometerData) {\n      data.current = accelerometerData;\n      var _data$current = data.current,\n          x = _data$current.x,\n          y = _data$current.y,\n          z = _data$current.z;\n      var total_amount_xyz = Math.sqrt(x * x + y * y + z * z) * 9.81;\n      console.log(new Date().getTime() + \",\" + total_amount_xyz);\n      console.log(\"Steps: \" + steps.current.length);\n      recentAccelerationData.current.push({\n        time: new Date().getTime(),\n        value: total_amount_xyz\n      });\n\n      if (recentAccelerationData.current.length > 20) {\n        tallyLatestSteps();\n      }\n    }));\n  };\n\n  var tallyLatestSteps = function tallyLatestSteps() {\n    console.log(\"RecentAccelerationData: \" + JSON.stringify(recentAccelerationData.current));\n\n    var _getSpikesFromAcceler = getSpikesFromAccelerometer({\n      recentAccelerationData: recentAccelerationData.current,\n      threshold: 11,\n      previousValue: previousValue.current,\n      previousHighPointTime: previousHighPointTimeRef.current\n    }),\n        spikes = _getSpikesFromAcceler.spikes,\n        previousHighPointTime = _getSpikesFromAcceler.previousHighPointTime;\n\n    previousValue.current = recentAccelerationData.current[recentAccelerationData.current.length - 1].value;\n    previousHighPointTimeRef.current = previousHighPointTime;\n    console.log(\"Spikes: \" + JSON.stringify(spikes) + \" with length: \" + spikes.length);\n    console.log(\"Steps before: \" + steps.current.length);\n    steps.current = steps.current.concat(spikes);\n    setStepCount(steps.current.length);\n    console.log(\"Steps after: \" + steps.current.length);\n    recentAccelerationData.current = [];\n  };\n\n  var _unsubscribe = function _unsubscribe() {\n    tallyLatestSteps();\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(function () {\n    steps.current = [];\n    Accelerometer.setUpdateInterval(100);\n    return function () {\n      return _unsubscribe();\n    };\n  }, []);\n  var _data$current2 = data.current,\n      x = _data$current2.x,\n      y = _data$current2.y,\n      z = _data$current2.z;\n  var total_amount_xyz = Math.sqrt(x * x + y * y + z * z) * 9.81;\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      style: styles.text,\n      children: [\"steps: \", stepCount]\n    }), _jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(TouchableOpacity, {\n        onPress: subscription ? _unsubscribe : _subscribe,\n        style: styles.button,\n        children: _jsx(Text, {\n          children: subscription ? 'Stop' : 'Start'\n        })\n      }), _jsx(TouchableOpacity, {\n        onPress: _slow,\n        style: [styles.button, styles.middleButton],\n        children: _jsx(Text, {\n          children: \"Slow\"\n        })\n      }), _jsx(TouchableOpacity, {\n        onPress: _fast,\n        style: styles.button,\n        children: _jsx(Text, {\n          children: \"Fast\"\n        })\n      })]\n    })]\n  });\n}\n\nfunction round(n) {\n  if (!n) {\n    return 0;\n  }\n\n  return Math.floor(n * 100) / 100;\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10\n  },\n  text: {\n    textAlign: 'center'\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","useRef","Accelerometer","getSpikesFromAccelerometer","Counter","data","x","y","z","startTime","Date","getTime","subscription","setSubscription","recentAccelerationData","steps","stepCount","setStepCount","previousHighPointTimeRef","previousValue","_slow","setUpdateInterval","_fast","_subscribe","isAvailableAsync","current","addListener","accelerometerData","total_amount_xyz","Math","sqrt","console","log","length","push","time","value","tallyLatestSteps","JSON","stringify","threshold","previousHighPointTime","spikes","concat","_unsubscribe","remove","styles","container","text","buttonContainer","button","middleButton","round","n","floor","StyleSheet","create","flex","justifyContent","paddingHorizontal","textAlign","flexDirection","alignItems","marginTop","backgroundColor","padding","borderLeftWidth","borderRightWidth","borderColor"],"sources":["/Users/yagosampaio/Documents/GitHub/stedi-react-native/Counter.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Accelerometer } from 'expo-sensors';\nimport getSpikesFromAccelerometer from './utils/StepCalculator';\n\n\nexport default function Counter() {\n  const data = useRef({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const startTime = new Date().getTime();\n  const [subscription, setSubscription] = useState(null);\n  const recentAccelerationData = useRef([]);//useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.\n  const steps = useRef([]);//useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.\n  const [stepCount, setStepCount] = useState(0);\n  const previousHighPointTimeRef = useRef(0);//this is the most recent time we had a spike in acceleration, we initialize it to 0 meaning none\n  const previousValue = useRef(0);//we process every 20 measurements, and this will be the 20th measurement from the previous time we processed data, start it at 0\n\n  //Android Docs: The data delay (or sampling rate) controls the interval at which sensor events are sent to your application via the onSensorChanged() callback method. The default data delay is suitable for monitoring typical screen orientation changes and uses a delay of 200,000 microseconds. You can specify other data delays, such as SENSOR_DELAY_GAME (20,000 microsecond delay), SENSOR_DELAY_UI (60,000 microsecond delay), or SENSOR_DELAY_FASTEST (0 microsecond delay).\n  // https://developer.android.com/guide/topics/sensors/sensors_overview#java\n\n  //Unable to find the default update interval, however the game play rate in Android is 20 millisecond intervals\n  const _slow = () => {\n    Accelerometer.setUpdateInterval(1000);\n  };\n\n  const _fast = () => {\n    Accelerometer.setUpdateInterval(100);\n  };\n\n  const _subscribe = () => {\n    (async () => {\n      await Accelerometer.isAvailableAsync(); //this seems to initialize the Accelerometer for Android\n    })(); //check if Acceleromoter is available\n    setStepCount(0);\n    recentAccelerationData.current=[];\n    steps.current=[];\n    setSubscription( //we set this state variable so later we can use it to unsubscribe\n      Accelerometer.addListener((accelerometerData) => {\n        data.current=accelerometerData;\n        const { x, y, z } = data.current;\n        //console.log(\"x: \"+x+\" y:\"+y+\" z:\"+z);\n        let total_amount_xyz = Math.sqrt(x * x+ y*y + z*z) * 9.81;\n        console.log(new Date().getTime()+\",\"+total_amount_xyz);\n        console.log(\"Steps: \"+steps.current.length);\n        recentAccelerationData.current.push({time: new Date().getTime(), value: total_amount_xyz});\n\n        if (recentAccelerationData.current.length>20){\n          tallyLatestSteps();\n        } \n      })\n    );\n  };\n\n  const tallyLatestSteps= ()=>{\n    console.log(\"RecentAccelerationData: \"+JSON.stringify(recentAccelerationData.current));\n    const {spikes, previousHighPointTime} = getSpikesFromAccelerometer({recentAccelerationData: recentAccelerationData.current, threshold: 11, previousValue: previousValue.current, previousHighPointTime: previousHighPointTimeRef.current});\n    previousValue.current = recentAccelerationData.current[recentAccelerationData.current.length-1].value;//store this for when we need to remember the last value\n    previousHighPointTimeRef.current = previousHighPointTime;\n    console.log(\"Spikes: \"+JSON.stringify(spikes)+ \" with length: \"+spikes.length);\n    console.log(\"Steps before: \"+steps.current.length);\n    steps.current=steps.current.concat(spikes);\n    setStepCount(steps.current.length);\n    console.log(\"Steps after: \"+steps.current.length);\n    recentAccelerationData.current=[];\n  }\n\n  const _unsubscribe = () => {\n    tallyLatestSteps();//count the last remaining steps before unsubscribing\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  useEffect(() => {\n    //_subscribe();\n    steps.current=[];\n    Accelerometer.setUpdateInterval(100);\n    return () => _unsubscribe();\n  }, []);\n\n  const { x, y, z } = data.current;\n  //console.log(\"x: \"+x+\" y:\"+y+\" z:\"+z);\n  let total_amount_xyz = Math.sqrt(x * x+ y*y + z*z) * 9.81;\n        \n\n\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.text}>\n       steps: {stepCount}\n      </Text>\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity\n          onPress={subscription ? _unsubscribe : _subscribe}\n          style={styles.button}\n        >\n          <Text>{subscription ? 'Stop' : 'Start'}</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          onPress={_slow}\n          style={[styles.button, styles.middleButton]}\n        >\n          <Text>Slow</Text>\n        </TouchableOpacity>\n\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Fast</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction round(n) {\n  if (!n) {\n    return 0;\n  }\n  return Math.floor(n * 100) / 100;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n  },\n  text: {\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}