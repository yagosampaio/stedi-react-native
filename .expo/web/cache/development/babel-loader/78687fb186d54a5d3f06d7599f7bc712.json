{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function (_React$Component) {\n  _inherits(TextInputOutlined, _React$Component);\n\n  var _super = _createSuper(TextInputOutlined);\n\n  function TextInputOutlined() {\n    _classCallCheck(this, TextInputOutlined);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _affixTopPosition, _onAffixChange, _topPosition;\n\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          customOutlineColor = _this$props.outlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          forceFocus = _this$props.forceFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,\n          onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,\n          left = _this$props.left,\n          right = _this$props.right,\n          placeholderTextColor = _this$props.placeholderTextColor,\n          rest = _objectWithoutProperties(_this$props, _excluded);\n\n      var adornmentConfig = getAdornmentConfig({\n        left: left,\n        right: right\n      });\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          height = _ref.height,\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n          textAlign = _ref.textAlign,\n          viewStyle = _objectWithoutProperties(_ref, _excluded2);\n\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n      if (disabled) {\n        var isTransparent = color(customOutlineColor).alpha() === 0;\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = colors.disabled;\n        outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = colors.placeholder;\n        outlineColor = customOutlineColor || colors.placeholder;\n        errorColor = colors.error;\n      }\n\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var labelTranslationXOffset = 0;\n      var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n        var side = _ref2.side,\n            type = _ref2.type;\n        return side === AdornmentSide.Left && type === AdornmentType.Icon;\n      });\n\n      if (isAdornmentLeftIcon) {\n        labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n      }\n\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n      if (height && typeof height !== 'number') {\n        console.warn('Currently we support only numbers in height prop');\n      }\n\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor,\n        errorColor: errorColor,\n        labelTranslationXOffset: labelTranslationXOffset\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      var leftLayout = parentState.leftLayout,\n          rightLayout = parentState.rightLayout;\n      var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: leftLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: rightLayout.height || 0,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n        height: minHeight,\n        affixHeight: ADORNMENT_SIZE,\n        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n      });\n      var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n      var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n        adornmentConfig: adornmentConfig,\n        rightAffixWidth: rightAffixWidth,\n        leftAffixWidth: leftAffixWidth,\n        mode: 'outlined'\n      });\n      var affixTopPosition = (_affixTopPosition = {}, _defineProperty2(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty2(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n      var onAffixChange = (_onAffixChange = {}, _defineProperty2(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty2(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n      var adornmentProps = {\n        adornmentConfig: adornmentConfig,\n        forceFocus: forceFocus,\n        topPosition: (_topPosition = {}, _defineProperty2(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty2(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n        onAffixChange: onAffixChange,\n        isTextInputFocused: parentState.focused\n      };\n\n      if (adornmentConfig.length) {\n        adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n          left: left,\n          right: right,\n          textStyle: _objectSpread(_objectSpread({}, font), {}, {\n            fontSize: fontSize,\n            fontWeight: fontWeight\n          }),\n          visible: this.props.parentState.labeled\n        });\n      }\n\n      return React.createElement(View, {\n        style: viewStyle\n      }, React.createElement(View, null, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor\n      }), React.createElement(View, {\n        style: [styles.labelContainer, {\n          paddingTop: LABEL_PADDING_TOP,\n          minHeight: minHeight\n        }]\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: LabelBackground\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderTextColor || placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center',\n          textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n        }), Platform.OS === 'web' && {\n          outline: 'none'\n        }, adornmentStyleAdjustmentForNativeInput]\n      }))), React.createElement(TextInputAdornment, adornmentProps)));\n    }\n  }]);\n\n  return TextInputOutlined;\n}(React.Component);\n\n_defineProperty(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, props);\n  }\n});\n\nexport default TextInputOutlined;\n\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      activeColor = _ref3.activeColor,\n      outlineColor = _ref3.outlineColor,\n      backgroundColor = _ref3.backgroundColor;\n  return React.createElement(View, {\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: hasActiveOutline ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","React","disabled","error","multiline","editable","render","props","outlineColor","rest","adornmentConfig","getAdornmentConfig","left","right","fonts","font","hasActiveOutline","parentState","fontSize","backgroundColor","colors","viewStyle","StyleSheet","fontSizeStyle","isTransparent","color","inputTextColor","activeColor","placeholderColor","customOutlineColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","labelTranslationXOffset","isAdornmentLeftIcon","type","side","AdornmentSide","AdornmentType","ADORNMENT_SIZE","minInputHeight","dense","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","label","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","onLayoutAnimatedText","placeholderStyle","fontWeight","wiggleOffsetX","minHeight","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","leftLayout","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","isTextInputFocused","focused","textStyle","visible","labeled","paddingTop","LabelBackground","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","textAlignVertical","textAlign","outline","Outline","borderRadius","theme","borderWidth","borderColor","position","paddingHorizontal","top","bottom","labelContainer","paddingBottom","input","flexGrow","margin","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      outlineColor: customOutlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = getAdornmentConfig({ left, right });\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      const isTransparent = color(customOutlineColor).alpha() === 0;\n\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = colors.placeholder;\n      outlineColor = customOutlineColor || colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor: backgroundColor as ColorValue,\n      errorColor,\n      labelTranslationXOffset,\n    };\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        mode: 'outlined',\n      }\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={[\n              styles.labelContainer,\n              {\n                paddingTop: LABEL_PADDING_TOP,\n                minHeight,\n              },\n            ]}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                  textAlign: textAlign\n                    ? textAlign\n                    : I18nManager.isRTL\n                    ? 'right'\n                    : 'left',\n                },\n                Platform.OS === 'web' && { outline: 'none' },\n                adornmentStyleAdjustmentForNativeInput,\n              ],\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}