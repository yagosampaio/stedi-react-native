{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"route\", \"style\", \"children\", \"borderless\", \"centered\", \"rippleColor\"],\n    _excluded2 = [\"component\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from \"../styles/overlay\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Badge from \"./Badge\";\nimport TouchableRipple from \"./TouchableRipple/TouchableRipple\";\nimport Text from \"./Typography/Text\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nimport useAnimatedValue from \"../utils/useAnimatedValue\";\nimport useAnimatedValueArray from \"../utils/useAnimatedValueArray\";\nimport useLayout from \"../utils/useLayout\";\nvar MIN_RIPPLE_SCALE = 0.001;\nvar MIN_TAB_WIDTH = 96;\nvar MAX_TAB_WIDTH = 168;\nvar BAR_HEIGHT = 56;\nvar BOTTOM_INSET = getBottomSpace();\nvar FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nvar Touchable = function Touchable(_ref) {\n  var _0 = _ref.route,\n      style = _ref.style,\n      children = _ref.children,\n      borderless = _ref.borderless,\n      centered = _ref.centered,\n      rippleColor = _ref.rippleColor,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return TouchableRipple.supported ? React.createElement(TouchableRipple, _extends({}, rest, {\n    disabled: rest.disabled || undefined,\n    borderless: borderless,\n    centered: centered,\n    rippleColor: rippleColor,\n    style: style\n  }), children) : React.createElement(TouchableWithoutFeedback, rest, React.createElement(View, {\n    style: style\n  }, children));\n};\n\nvar SceneComponent = React.memo(function (_ref2) {\n  var component = _ref2.component,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  return React.createElement(component, rest);\n});\n\nvar BottomNavigation = function BottomNavigation(_ref3) {\n  var navigationState = _ref3.navigationState,\n      renderScene = _ref3.renderScene,\n      renderIcon = _ref3.renderIcon,\n      renderLabel = _ref3.renderLabel,\n      _ref3$renderTouchable = _ref3.renderTouchable,\n      renderTouchable = _ref3$renderTouchable === void 0 ? function (props) {\n    return React.createElement(Touchable, props);\n  } : _ref3$renderTouchable,\n      _ref3$getLabelText = _ref3.getLabelText,\n      getLabelText = _ref3$getLabelText === void 0 ? function (_ref4) {\n    var route = _ref4.route;\n    return route.title;\n  } : _ref3$getLabelText,\n      _ref3$getBadge = _ref3.getBadge,\n      getBadge = _ref3$getBadge === void 0 ? function (_ref5) {\n    var route = _ref5.route;\n    return route.badge;\n  } : _ref3$getBadge,\n      _ref3$getColor = _ref3.getColor,\n      getColor = _ref3$getColor === void 0 ? function (_ref6) {\n    var route = _ref6.route;\n    return route.color;\n  } : _ref3$getColor,\n      _ref3$getAccessibilit = _ref3.getAccessibilityLabel,\n      getAccessibilityLabel = _ref3$getAccessibilit === void 0 ? function (_ref7) {\n    var route = _ref7.route;\n    return route.accessibilityLabel;\n  } : _ref3$getAccessibilit,\n      _ref3$getTestID = _ref3.getTestID,\n      getTestID = _ref3$getTestID === void 0 ? function (_ref8) {\n    var route = _ref8.route;\n    return route.testID;\n  } : _ref3$getTestID,\n      activeColor = _ref3.activeColor,\n      inactiveColor = _ref3.inactiveColor,\n      _ref3$keyboardHidesNa = _ref3.keyboardHidesNavigationBar,\n      keyboardHidesNavigationBar = _ref3$keyboardHidesNa === void 0 ? true : _ref3$keyboardHidesNa,\n      barStyle = _ref3.barStyle,\n      _ref3$labeled = _ref3.labeled,\n      labeled = _ref3$labeled === void 0 ? true : _ref3$labeled,\n      style = _ref3.style,\n      theme = _ref3.theme,\n      _ref3$sceneAnimationE = _ref3.sceneAnimationEnabled,\n      sceneAnimationEnabled = _ref3$sceneAnimationE === void 0 ? false : _ref3$sceneAnimationE,\n      onTabPress = _ref3.onTabPress,\n      onIndexChange = _ref3.onIndexChange,\n      _ref3$shifting = _ref3.shifting,\n      shifting = _ref3$shifting === void 0 ? navigationState.routes.length > 3 : _ref3$shifting,\n      safeAreaInsets = _ref3.safeAreaInsets;\n\n  var _safeAreaInsets$left, _safeAreaInsets$right, _safeAreaInsets$botto;\n\n  var scale = theme.animation.scale;\n  var focusedKey = navigationState.routes[navigationState.index].key;\n  var visibleAnim = useAnimatedValue(1);\n  var tabsAnims = useAnimatedValueArray(navigationState.routes.map(function (_, i) {\n    return i === navigationState.index ? 1 : 0;\n  }));\n  var offsetsAnims = useAnimatedValueArray(navigationState.routes.map(function (_, i) {\n    return i === navigationState.index ? 0 : 1;\n  }));\n  var indexAnim = useAnimatedValue(navigationState.index);\n  var rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  var _useLayout = useLayout(),\n      _useLayout2 = _slicedToArray(_useLayout, 2),\n      layout = _useLayout2[0],\n      onLayout = _useLayout2[1];\n\n  var _React$useState = React.useState([focusedKey]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  if (!loaded.includes(focusedKey)) {\n    setLoaded(function (loaded) {\n      return [].concat(_toConsumableArray(loaded), [focusedKey]);\n    });\n  }\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      keyboardVisible = _React$useState4[0],\n      setKeyboardVisible = _React$useState4[1];\n\n  var handleKeyboardShow = React.useCallback(function () {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [scale, visibleAnim]);\n  var handleKeyboardHide = React.useCallback(function () {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true\n    }).start(function () {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n  var animateToIndex = React.useCallback(function (index) {\n    rippleAnim.setValue(MIN_RIPPLE_SCALE);\n    Animated.parallel([Animated.timing(rippleAnim, {\n      toValue: 1,\n      duration: shifting ? 400 * scale : 0,\n      useNativeDriver: true\n    })].concat(_toConsumableArray(navigationState.routes.map(function (_, i) {\n      return Animated.timing(tabsAnims[i], {\n        toValue: i === index ? 1 : 0,\n        duration: shifting ? 150 * scale : 0,\n        useNativeDriver: true\n      });\n    })))).start(function (_ref9) {\n      var finished = _ref9.finished;\n      tabsAnims.map(function (tab, i) {\n        return tab.setValue(i === index ? 1 : 0);\n      });\n      indexAnim.setValue(index);\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        offsetsAnims.forEach(function (offset, i) {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  }, [indexAnim, shifting, navigationState.routes, offsetsAnims, rippleAnim, scale, tabsAnims]);\n  React.useEffect(function () {\n    animateToIndex(navigationState.index);\n  }, []);\n  React.useEffect(function () {\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return function () {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, [handleKeyboardHide, handleKeyboardShow]);\n  var prevNavigationState = React.useRef();\n  React.useEffect(function () {\n    offsetsAnims.forEach(function (offset, i) {\n      var _prevNavigationState$;\n\n      if (i === navigationState.index || i === ((_prevNavigationState$ = prevNavigationState.current) === null || _prevNavigationState$ === void 0 ? void 0 : _prevNavigationState$.index)) {\n        offset.setValue(0);\n      }\n    });\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  var handleTabPress = function handleTabPress(index) {\n    var event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: function preventDefault() {\n        event.defaultPrevented = true;\n      }\n    };\n    onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  var jumpTo = React.useCallback(function (key) {\n    var index = navigationState.routes.findIndex(function (route) {\n      return route.key === key;\n    });\n    onIndexChange(index);\n  }, [navigationState.routes, onIndexChange]);\n  var routes = navigationState.routes;\n  var colors = theme.colors,\n      isDarkTheme = theme.dark,\n      mode = theme.mode;\n\n  var _ref10 = StyleSheet.flatten(barStyle) || {},\n      customBackground = _ref10.backgroundColor,\n      _ref10$elevation = _ref10.elevation,\n      elevation = _ref10$elevation === void 0 ? 4 : _ref10$elevation;\n\n  var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n  var backgroundColor = shifting ? indexAnim.interpolate({\n    inputRange: routes.map(function (_, i) {\n      return i;\n    }),\n    outputRange: routes.map(function (route) {\n      return getColor({\n        route: route\n      }) || approxBackgroundColor;\n    })\n  }) : approxBackgroundColor;\n  var isDark = typeof approxBackgroundColor === 'string' ? !color(approxBackgroundColor).isLight() : true;\n  var textColor = isDark ? white : black;\n  var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n  var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n  var touchColor = color(activeColor || activeTintColor).alpha(0.12).rgb().string();\n  var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  var maxTabBarWidth = maxTabWidth * routes.length;\n  var tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  var tabWidth = tabBarWidth / routes.length;\n  var rippleSize = layout.width / 4;\n  var insets = {\n    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : 0,\n    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : 0,\n    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : BOTTOM_INSET\n  };\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(View, {\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }]\n  }, routes.map(function (route, index) {\n    if (!loaded.includes(route.key)) {\n      return null;\n    }\n\n    var focused = navigationState.index === index;\n    var opacity = sceneAnimationEnabled ? tabsAnims[index] : focused ? 1 : 0;\n    var top = sceneAnimationEnabled ? offsetsAnims[index].interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, FAR_FAR_AWAY]\n    }) : focused ? 0 : FAR_FAR_AWAY;\n    return React.createElement(Animated.View, {\n      key: route.key,\n      pointerEvents: focused ? 'auto' : 'none',\n      accessibilityElementsHidden: !focused,\n      importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n      style: [StyleSheet.absoluteFill, {\n        opacity: opacity\n      }],\n      collapsable: false,\n      removeClippedSubviews: Platform.OS === 'ios' ? navigationState.index !== index : true\n    }, React.createElement(Animated.View, {\n      style: [styles.content, {\n        top: top\n      }]\n    }, renderScene({\n      route: route,\n      jumpTo: jumpTo\n    })));\n  })), React.createElement(Surface, {\n    style: [styles.bar, keyboardHidesNavigationBar ? {\n      transform: [{\n        translateY: visibleAnim.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height, 0]\n        })\n      }],\n      position: keyboardVisible ? 'absolute' : null\n    } : null, barStyle],\n    pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboardVisible ? 'none' : 'auto' : 'none',\n    onLayout: onLayout\n  }, React.createElement(Animated.View, {\n    style: [styles.barContent, {\n      backgroundColor: backgroundColor\n    }]\n  }, React.createElement(View, {\n    style: [styles.items, {\n      marginBottom: insets.bottom,\n      marginHorizontal: Math.max(insets.left, insets.right),\n      maxWidth: maxTabBarWidth\n    }],\n    accessibilityRole: 'tablist'\n  }, shifting ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.ripple, {\n      top: (BAR_HEIGHT - rippleSize) / 2,\n      left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n      height: rippleSize,\n      width: rippleSize,\n      borderRadius: rippleSize / 2,\n      backgroundColor: getColor({\n        route: routes[navigationState.index]\n      }),\n      transform: [{\n        scale: rippleAnim.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 8]\n        })\n      }],\n      opacity: rippleAnim.interpolate({\n        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n        outputRange: [0, 0, 1, 1]\n      })\n    }]\n  }) : null, routes.map(function (route, index) {\n    var focused = navigationState.index === index;\n    var active = tabsAnims[index];\n    var scale = labeled && shifting ? active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.5, 1]\n    }) : 1;\n    var translateY = labeled ? shifting ? active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [7, 0]\n    }) : 0 : 7;\n    var activeOpacity = active;\n    var inactiveOpacity = active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [1, 0]\n    });\n    var badge = getBadge({\n      route: route\n    });\n    return renderTouchable({\n      key: route.key,\n      route: route,\n      borderless: true,\n      centered: true,\n      rippleColor: touchColor,\n      onPress: function onPress() {\n        return handleTabPress(index);\n      },\n      testID: getTestID({\n        route: route\n      }),\n      accessibilityLabel: getAccessibilityLabel({\n        route: route\n      }),\n      accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n      accessibilityComponentType: 'button',\n      accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n      accessibilityState: {\n        selected: focused\n      },\n      style: styles.item,\n      children: React.createElement(View, {\n        pointerEvents: \"none\"\n      }, React.createElement(Animated.View, {\n        style: [styles.iconContainer, {\n          transform: [{\n            translateY: translateY\n          }]\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.iconWrapper, {\n          opacity: activeOpacity\n        }]\n      }, renderIcon ? renderIcon({\n        route: route,\n        focused: true,\n        color: activeTintColor\n      }) : React.createElement(Icon, {\n        source: route.icon,\n        color: activeTintColor,\n        size: 24\n      })), React.createElement(Animated.View, {\n        style: [styles.iconWrapper, {\n          opacity: inactiveOpacity\n        }]\n      }, renderIcon ? renderIcon({\n        route: route,\n        focused: false,\n        color: inactiveTintColor\n      }) : React.createElement(Icon, {\n        source: route.icon,\n        color: inactiveTintColor,\n        size: 24\n      })), React.createElement(View, {\n        style: [styles.badgeContainer, {\n          right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n        }]\n      }, typeof badge === 'boolean' ? React.createElement(Badge, {\n        visible: badge,\n        size: 8\n      }) : React.createElement(Badge, {\n        visible: badge != null,\n        size: 16\n      }, badge))), labeled ? React.createElement(Animated.View, {\n        style: [styles.labelContainer, {\n          transform: [{\n            scale: scale\n          }]\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.labelWrapper, {\n          opacity: activeOpacity\n        }]\n      }, renderLabel ? renderLabel({\n        route: route,\n        focused: true,\n        color: activeTintColor\n      }) : React.createElement(Text, {\n        style: [styles.label, {\n          color: activeTintColor\n        }]\n      }, getLabelText({\n        route: route\n      }))), shifting ? null : React.createElement(Animated.View, {\n        style: [styles.labelWrapper, {\n          opacity: inactiveOpacity\n        }]\n      }, renderLabel ? renderLabel({\n        route: route,\n        focused: false,\n        color: inactiveTintColor\n      }) : React.createElement(Text, {\n        selectable: false,\n        style: [styles.label, {\n          color: inactiveTintColor\n        }]\n      }, getLabelText({\n        route: route\n      })))) : React.createElement(View, {\n        style: styles.labelContainer\n      }))\n    });\n  })))));\n};\n\nBottomNavigation.SceneMap = function (scenes) {\n  return function (_ref11) {\n    var route = _ref11.route,\n        jumpTo = _ref11.jumpTo;\n    return React.createElement(SceneComponent, {\n      key: route.key,\n      component: scenes[route.key ? route.key : ''],\n      route: route,\n      jumpTo: jumpTo\n    });\n  };\n};\n\nexport default withTheme(BottomNavigation);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: _objectSpread({\n    flexDirection: 'row'\n  }, Platform.OS === 'web' ? {\n    width: '100%'\n  } : null),\n  item: {\n    flex: 1,\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center'\n  }),\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: _objectSpread({}, StyleSheet.absoluteFillObject),\n  label: _objectSpread({\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    whiteSpace: 'nowrap',\n    alignSelf: 'center'\n  } : null),\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"sources":["BottomNavigation.tsx"],"names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","getBottomSpace","FAR_FAR_AWAY","Platform","Touchable","route","rest","TouchableRipple","style","SceneComponent","React","BottomNavigation","renderTouchable","props","getLabelText","getBadge","getColor","getAccessibilityLabel","getTestID","keyboardHidesNavigationBar","labeled","sceneAnimationEnabled","shifting","navigationState","safeAreaInsets","scale","theme","focusedKey","visibleAnim","useAnimatedValue","tabsAnims","useAnimatedValueArray","i","offsetsAnims","indexAnim","rippleAnim","useLayout","loaded","setLoaded","handleKeyboardShow","setKeyboardVisible","Animated","toValue","duration","useNativeDriver","handleKeyboardHide","animateToIndex","index","finished","tab","offset","Keyboard","prevNavigationState","handleTabPress","event","defaultPrevented","preventDefault","onTabPress","onIndexChange","jumpTo","key","routes","dark","mode","backgroundColor","elevation","StyleSheet","approxBackgroundColor","customBackground","isDarkTheme","overlay","colors","inputRange","outputRange","isDark","color","textColor","activeTintColor","inactiveTintColor","touchColor","activeColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","layout","tabWidth","rippleSize","insets","left","right","bottom","styles","background","focused","opacity","top","renderScene","transform","translateY","position","keyboardVisible","onLayout","marginBottom","marginHorizontal","maxWidth","height","width","borderRadius","active","activeOpacity","inactiveOpacity","badge","borderless","centered","rippleColor","onPress","testID","accessibilityLabel","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","children","renderIcon","String","renderLabel","labelContainer","scenes","withTheme","container","flex","overflow","content","bar","barContent","alignItems","items","flexDirection","item","paddingVertical","ripple","iconContainer","marginTop","alignSelf","iconWrapper","paddingBottom","labelWrapper","absoluteFillObject","label","fontSize","textAlign","whiteSpace","badgeContainer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  Keyboard,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../styles/overlay';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Badge from './Badge';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport Text from './Typography/Text';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../utils/useAnimatedValueArray';\nimport useLayout from '../utils/useLayout';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, [handleKeyboardHide, handleKeyboardShow]);\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <Animated.View\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </Animated.View>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}